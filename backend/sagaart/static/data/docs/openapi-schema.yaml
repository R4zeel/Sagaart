openapi: 3.0.3
info:
  version: ""
  title: Онлайн-галерея Sagaart
paths:
  /api/user/registration:
    post:
      tags: [Личный кабинет]
      summary: Регистрация пользователя.
      description: Создание личного кабинета пользователя. Вводными данными будет E-mail пользователя и пароль придуманный пользователем.
      operationId: postuserreg
      requestBody:
        description: При регистрации пользователь вводит E-mail и пароль.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPost"
      responses:
        "201":
          description: Успешно выполнена регистрация личного кабинета.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPost"
        "400":
          description: Некорректно введенные данные при регистрации личного кабинета.
  /api/user/auth:
    post:
      tags: [Личный кабинет]
      summary: Авторизация пользователя.
      description: Вход в личный кабинет пользователя по E-mail и пароль с созданием токена авторизации.
      operationId: postuserauth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAuthTokenCreate"
      responses:
        "200":
          description: Успешна проведена идентификация, аутентификация.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAuthTokenGetResponse"
        "400":
          description: Некорректно введенные данные для авторизации личного кабинета.
  /api/user/logout:
    post:
      tags: [Личный кабинет]
      summary: Выход из личного кабинета пользователя.
      description: При выполнении выхода из личного кабинета ранее созданный токен авторизации удаляется.
      operationId: getuserlogout
      responses:
        "200":
          description: Успешно выполнен выход из личного кабинета.
  /api/user/{user_id}:
    get:
      tags: [Личный кабинет]
      summary: Получение данных личного кабинета пользователя.
      description: При переходе в личный кабинет пользователя после авторизации срабатывает данный метод для получения информации личного кабинета пользователя.
      operationId: getuser
      parameters:
        - name: user_id
          in: path
          description: Уникальный идентификационный номер пользователя.
          required: true
          schema:
            type: string
            format: int64
      responses:
        "200":
          description: Информация личного кабинета пользователя успешно отображена.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Выполните вход в личный кабинет.
    patch:
      tags: [Личный кабинет]
      summary: Редактирование данных личного кабинета пользователя.
      description: Редактирование данных личного кабинета пользователя ФИО, телефон.
      operationId: patchuser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPatch"
      parameters:
        - name: user_id
          in: path
          description: Уникальный идентификационный номер пользователя.
          required: true
          schema:
            type: string
            format: int64
      responses:
        "200":
          description: Информация личного кабинета пользователя успешно отображена.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPatch"
        "400":
          description: Некорректно введенные данные при сохранении измененных данных личного кабинета.
        "401":
          description: Выполните вход в личный кабинет.
    post:
      tags: [Личный кабинет]
      summary: Изменение пароля в личном кабинете пользователя.
      operationId: postuserauthresetpwd
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPostPassword"
      parameters:
        - name: user_id
          in: path
          description: Уникальный идентификационный номер пользователя.
          required: true
          schema:
            type: string
            format: int64
      responses:
        "204":
          description: Пароль от личного кабинета пользователя успешно изменен.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPostPassword"
        "400":
          description: Некорректно введен пароль личного кабинета для изменения.
        "401":
          description: Выполните вход в личный кабинет.
  /api/user/emailpwd:
    post:
      tags: [Личный кабинет]
      summary: Отправка электронного письма по смене пароля.
      description: Отправка электронного письма с ссылкой для восстановления пароля от личного кабинета пользователя.
      operationId: postuseremailpwd
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserEmailPWD"
      parameters:
        - name: email_user
          in: query
          description: Email пользователя.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Успешно передана информация для отправки письма с ссылкой на восстановление пароля от личного кабинета пользователя.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEmailPWD"
        "400":
          description: Некорректно введен Email от личного кабинета для восстановления пароля.
  /api/user/{user_id}/resetpwd:
    post:
      tags: [Личный кабинет]
      summary: Восстановление пароля личного кабинета.
      description: Восстановление пароля от личного кабинета пользователя после перехода по ссылке в электронном письме.
      operationId: postuserresetpwd
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPostPassword"
      parameters:
        - name: user_id
          in: path
          description: Уникальный идентификационный номер пользователя.
          required: true
          schema:
            type: string
            format: int64
      responses:
        "204":
          description: Пароль от личного кабинета пользователя успешно изменен.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPostPassword"
        "400":
          description: Некорректно введен пароль личного кабинета для изменения.
        "404":
          description: Страница восстановления пароля личного кабинета не найдена.

  /api/feedback:
    post:
      tags: [Дополнительно]
      summary: Форма обратной связи.
      description: Отправка формы обратной связи на корпоративные почты организации.
      operationId: postfbf
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Feedback"
      responses:
        "200":
          description: Успешно передана информация для отправки электронного письма с формой обратной связи на почту организации.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feedback"
        "400":
          description: Некорректно введен Email/Телефон, отсутствует текст формы обратной связи.

  /api/product:
    get:
      tags: [Каталог товаров искусств]
      summary: Список товаров искусств.
      description: Получение всего списка товаров искусств с возможностью поиска и фильтрации по определенным параметрам. Поиск должен выполнятся по наименованию товара искусства и имени автора товара искусства. Предусмотренные фильтры категория товара, стиль товара, жанр товара, категория размера товара, страна создания товара, год создания товара, категория цены товара. Обратите внимание, что предусмотрено ограничение по количеству товаров на странице. *Каталог доступен любой роли/классу пользователя.
      operationId: getproducts
      parameters:
        - name: product_category
          in: query
          required: false
          description: Категории товара 1 - Живопись, 2 - Графика, 3 - Фотография, 4 - Digital.
          schema:
            type: integer
            enum: [1, 2, 3, 4]
        - name: product_style
          in: query
          required: false
          description: Стили товара 1 - Анималистика, 2 - Аллегорический, 3 - Батальный, 4 - Былинный, 5 - Бытовой, 6 - Ню, 7 - Религиозный.
          schema:
            type: integer
            enum: [1, 2, 3, 4, 5, 6, 7]
        - name: product_genre
          in: query
          required: false
          description: Жанры товара 1 - Абстракция, 2 - Минимализм, 3 - Экспрессионизм, 4 - Концептуальное искусство, 5 - Фигуративное искусство, 6 - Pop Art, 7 - Street Art, 8 - Интерьерное.
          schema:
            type: integer
            enum: [1, 2, 3, 4, 5, 6, 7, 8]
        - name: product_size_category
          in: query
          description: Выбор размера товара искусства 1 - Любой, 2 - Small (до 40 см), 3 - Medium (40 - 100 см), 4 - Large (100 - 160 см), 5 - Oversize (более 160 см)
          required: false
          schema:
            type: integer
            enum: [1, 2, 3, 4, 5]
        - name: product_country
          in: query
          required: false
          description: Страна создания товара искусства.
          schema:
            type: string
            example: Испания
        - name: product_year_start
          in: query
          required: false
          description: Пользователь устанавливает диапазон годов создания товаров искусств, чтобы найти в этом промежутке, учитывая введеные года, нужные товары искусства. Первый год.
          schema:
            type: integer
            format: date
            description: Год создания товара
            example: 2001
        - name: product_year_end
          in: query
          required: false
          description: Пользователь устанавливает диапазон годов создания товаров искусств, чтобы найти в этом промежутке, учитывая введеные года, нужные товары искусства. Второй год.
          schema:
            type: integer
            format: date
            description: Год создания товара
            example: 2003
        - name: product_cost_category
          in: query
          description: Выбор категории цен товара искусства 1 - до 20 000 руб., 2 - от 20 000 до 50 000 руб., 3 - от 50 000 до 100 000 руб., 4 - от 100 000 до 200 000 руб., 5 - от 200 000 до 500 000 руб.
          required: false
          schema:
            type: integer
            enum: [1, 2, 3, 4, 5]
      responses:
        "200":
          description: Успешная загрузка товаров искусств с учетом фильтров и поисковой строки.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductSearchArray"
  /api/product/{product_id}:
    get:
      tags: [Каталог товаров искусств]
      summary: Получение информации карточки товара искусств.
      description: Получение всей информации товара искусства при переходе в карточку с подгрузкой аналитики данного товара. Обратите внимание, что подгрузка аналитики доступна только авторизованным пользователям с подпиской.
      operationId: getproductinfo
      parameters:
        - name: product_id
          in: path
          description: Уникальный идентификатор товара искусств.
          required: true
          schema:
            type: string
            format: int64
      responses:
        "200":
          description: Информация карточки товара искусств успешно отображена.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Информация по товару искусств не найдена.

  /api/user/{user_id}/subscribe:
    post:
      tags: [Аналитика товаров искусств]
      summary: Приобретение подписки сайта пользователем. (заглушка)
      description: Процесс предоставления информации оплаты и перенаправление пользователя на сторонний сервис для оплаты подписки сайта. Написан с целью заглушки, так как в рамках Хакатона интегрирование API сервиса оплаты не предусматривается.
      operationId: posttusersubsctribe
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSubscribeBuy"
      parameters:
        - name: user_id
          in: path
          description: Уникальный идентификационный номер пользователя.
          required: true
          schema:
            type: string
            format: int64
      responses:
        "200":
          description: Пользователь успешно перенаправлен на сервис оплаты.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSubscribeBuy"
        "401":
          description: Выполните вход в личный кабинет.
  /api/product/analytics:
    post:
      tags: [Аналитика товаров искусств]
      summary: Создание заказа на аналитику/оценку товара искусства
      description: Создание заказа на аналитику/оценку товара искусства с целью получения дополнительной информации о данном товаре. В результате с помощью данного алгоритма оценки заказчика будет предоставлена информация справедливая цена товара, выставки в которых участвовал автор, график изменения цены товара искусства, в каких коллекциях находится товар, упоминания товара в СМИ.
      operationId: postanalytics
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAnalyticsOrder"
      responses:
        "200":
          description: Успешно отправлен товар искусства на аналитику.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAnalyticsOrder"
        "400":
          description: Указаны невалидные данные для заказа аналитики товара.
        "401":
          description: Выполните вход в личный кабинет.
  /api/user/{user_id}/analytics:
    get:
      tags: [Аналитика товаров искусств]
      summary: История заказов аналитики товаров искусств.
      description: Получение истории заказов аналитики/оценки товара искусств в личном кабинете пользователя.
      operationId: getuseranalyticsarray
      parameters:
        - name: user_id
          in: path
          description: Уникальный идентификационный номер пользователя.
          required: true
          schema:
            type: string
            format: int64
      responses:
        "200":
          description: Успешная загрузка списка заказов аналитики товаров искусств.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAnalyticsListArray"
        "401":
          description: Выполните вход в личный кабинет.
  /api/user/{user_id}/analytics/{productanalytics_id}:
    get:
      tags: [Аналитика товаров искусств]
      summary: Заказанная аналитика товара искусства.
      description: Получение всей информации об заказанной аналитике/оценке товара искусства.
      operationId: getuseranalytics
      parameters:
        - name: user_id
          in: path
          description: Уникальный идентификационный номер пользователя.
          required: true
          schema:
            type: string
            format: int64
        - name: productanalytics_id
          in: path
          description: Уникальный идентификационный номер пользователя.
          required: true
          schema:
            type: string
            format: int64
      responses:
        "200":
          description: Информация карточки товара искусств успешно отображена.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAnalyticsUser"
        "401":
          description: Выполните вход в личный кабинет.
        "404":
          description: Информация по товару искусств не найдена.

components:
  schemas:
    User: #Базовая схема сущности "Пользователь".
      type: object
      required:
        - user_id
        - email_user
        - password
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
        email_user:
          type: string
          example: example@yandex.ru
        subcribe:
          $ref: "#/components/schemas/UserSubscribe"
        first_name:
          type: string
          example: Иван
        sur_name:
          type: string
          example: Иванов
        middle_name:
          type: string
          example: Иванович
        telephone:
          type: string
          example: 79012325312
        password:
          type: string
          example: qwert12345
    UserPost: #Схема для создания личного кабинета/пользователя.
      type: object
      required:
        - email_user
        - password
      properties:
        email_user:
          type: string
          example: example@yandex.ru
        first_name:
          type: string
          example: Иван
        sur_name:
          type: string
          example: Иванов
        middle_name:
          type: string
          example: Иванович
        telephone:
          type: string
          example: 79012325312
        password:
          type: string
          example: qwert12345
    UserPatch: #Схема для редактирования личного кабинета/пользователя.
      type: object
      required:
        - user_id
        - email_user
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
        email_user:
          type: string
          example: example@yandex.ru
        first_name:
          type: string
          example: Иван
        sur_name:
          type: string
          example: Иванов
        middle_name:
          type: string
          example: Иванович
        telephone:
          type: string
          example: 79012325312
    UserEmailPWD: #Схема для отправки письма с целью восстановления пароля от личного кабинета.
      type: object
      required:
        - user_id
        - email_user
      properties:
        email_user:
          type: string
          example: example@yandex.ru
    UserPostPassword: #Схема для изменения пароля личного кабинета пользователя.
      type: object
      required:
        - user_id
        - new_password
        - current_password
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
        new_password:
          type: string
          example: qwert12345
        current_password:
          type: string
          example: qwert12345
    UserAuthTokenCreate: #Схема создания токена авторизации.
      type: object
      required:
        - email_user
        - password
      properties:
        email_user:
          type: string
          example: example@yandex.ru
        password:
          type: string
          example: qwert12345
    UserAuthTokenGetResponse: #Схема чтения токена авторизации.
      type: object
      properties:
        auth_token:
          type: string
    UserSubscribe: #Базования схема по сущности "Подписка".
      type: object
      required:
        - subscribe_id
        - subscribe_cost
        - subscribe_status
        - subscribe_date_start
        - subscribe_date_end
        - subscribe_pay
      properties:
        subscribe_id:
          type: integer
          description: 1 - Тариф "Freelancer", 2 - Тариф "Professional", 3 - Тариф "Agency"
          enum:
            - 1
            - 2
            - 3
        subscribe_cost:
          type: integer
          description: 1000 - Стоимость тарифа "Freelancer", 2000 - Стоимость тарифа "Professional", 3000 - Стоимость тарифа "Agency"y"
          enum:
            - 1000
            - 2000
            - 3000
        subscribe_status:
          type: integer
          description: 0 - подписка отсутствует. 1 - подписка активна.
          enum:
            - 0
            - 1
        subscribe_date_start:
          type: string
          format: date
          description: Дата начала подписки. При регистрации личного кабинета значение соответствует дате установленной на ПК.
          example: 01.01.2024
        subscribe_date_end:
          type: string
          format: date
          description: Дата окончания подписки. При регистрации личного кабинета значение соответствует дате установленной на ПК.
          example: 01.01.2025
        subscribe_pay:
          $ref: "#/components/schemas/UserSubscribePay"
    UserSubscribePay: #Базовая схема по сущности "Оплата подписки".
      type: object
      required:
        - subscribePay_id
        - subscribePay_status
      properties:
        subscribePay_id:
          type: integer
          format: int64
          example: 1
        subscribePay_status:
          type: integer
          description: Статус выполнения оплаты подписки 1 - Не оплачен 2 - Частично оплачен  3 - Оплачен
          enum:
            - 1
            - 2
            - 3
        subscribePay_way:
          type: string
          description: Способ оплаты подписки.
          enum:
            - СПБ
            - Карта
            - Кошелек
    UserSubscribeShort: #Вспомогательная схема краткой информации о подписке.
      type: object
      required:
        - subscribe_cost
      properties:
        subscribe_id:
          type: integer
          description: 1 - Тариф "Freelancer", 2 - Тариф "Professional", 3 - Тариф "Agency"
          enum:
            - 1
            - 2
            - 3
        subscribe_cost:
          type: integer
          description: 1000 - Стоимость тарифа "Freelancer", 2000 - Стоимость тарифа "Professional", 3000 - Стоимость тарифа "Agency"y"
          enum:
            - 1000
            - 2000
            - 3000
    UserSubscribeBuy: #Схема для отправки информации в сторонний сервис оплаты подписки.
      type: object
      required:
        - user_id
        - subscribe
        - url_home
        - url_pay
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
        subscribe:
          $ref: "#/components/schemas/UserSubscribeShort"
        url_home:
          type: string
          example: URL страницы на которую вернется пользователь после оплаты подписки на стороннем сервисе.
        url_pay:
          type: string
          example: URL страницы стороннего сервиса для оплаты подписки.
    Feedback: #Схема для формы обратной связи.
      type: object
      required:
        - email_user
        - feedback_info
        - feedback_email_to
      properties:
        email_user:
          type: string
          example: example@yandex.ru
        feedback_user_name:
          type: string
          example: Иванов Иван Иванович
        feedback_telephone:
          type: string
          example: 79012325312
        feedback_info:
          type: string
        feedback_email_to:
          type: string
          description: Электронная почта на которую необходимо выполнить отправку форму обратной связи.
          example: help@yandex.ru
    Product: #Базовая схема по сущности "Товар".
      type: object
      required:
        - product_id
        - product_name
        - product_jpeg
        - product_category
        - product_style
        - product_genre
        - product_size_category
        - product_year
        - product_cost_category
        - product_author
      properties:
        product_id:
          type: integer
          format: int64
          example: 10
        product_name:
          type: string
          example: Мона Лиза
        product_jpeg:
          type: string
          example: Reference/URL подгруженного изображения товара искусств.
        product_category:
          $ref: "#/components/schemas/ProductCategory"
        product_style:
          $ref: "#/components/schemas/ProductStyle"
        product_genre:
          $ref: "#/components/schemas/ProductGenre"
        product_size_category:
          type: integer
          description: Выбор размера товара искусства 1 - Любой, 2 - Small (до 40 см), 3 - Medium (40 - 100 см), 4 - Large (100 - 160 см), 5 - Oversize (более 160 см)
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        product_size:
          type: string
          example: 40.6 × 40.6 см
        product_country:
          type: string
          example: Испания
        product_city_sale:
          type: string
          description: Город продажи товара искусства.
          example: Москва
        product_year:
          type: string
          format: date
          description: Год создания товара
          example: 01.01.2001
        product_material1:
          type: string
          example: Акриловые краски
        product_material2:
          type: string
          example: Холст
        product_info:
          type: string
          example: На картине изображена по пояс молодая женщина по имени Лиза Герардини. Считается, что портрет заказал её муж, Франческо дель Джокондо, поэтому изображённую даму также называют Джокондой. «Мона Лиза» буквально означает «Госпожа Лиза».
        product_cost_category:
          type: integer
          description: Выбор категории цен товара искусства 1 - до 20 000 руб., 2 - от 20 000 до 50 000 руб., 3 - от 50 000 до 100 000 руб., 4 - от 100 000 до 200 000 руб., 5 - от 200 000 до 500 000 руб.
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        product_cost_end:
          type: integer
          description: Итоговая цена товара, которая будет отображена на карточке товара.
          example: 79200000
        product_cost_fair:
          type: integer
          description: Желаемая цена товара, которая будет отображена в описании карточки товара.
          example: 92300000
        product_author:
          $ref: "#/components/schemas/ProductAuthor"
        product_analytics:
          $ref: "#/components/schemas/ProductAnalytics"
    ProductAuthor: #Базовая схема по сущности "Автор".
      type: object
      required:
        - productAuthor_id
        - productAuthor_name
      properties:
        productAuthor_id:
          type: integer
          format: int64
          example: 10
        productAuthor_name:
          type: string
          example: Леонардо да Винчи
        productAuthor_sex:
          type: integer
          description: Выбор пола автора. 1 - Мужской, 2 - Женский.
          enum:
            - 1
            - 2
        productAuthor_age:
          type: string
          description: Возраст
          example: 92 года.
        productAuthor_year:
          type: string
          format: date
          description: Год рождения
          example: 01.01.1452
        productAuthor_show:
          $ref: "#/components/schemas/ProductAuthorShow"
        productAuthor_achievement:
          $ref: "#/components/schemas/ProductAuthorAchievement"
        productAuthor_city:
          type: string
          description: Город рождения автора товара искусства.
          example: Селение Анкиано, около городка Винчи, близ Флоренции.
        productAuthor_city_live:
          type: string
          description: Город проживания автора товара искусств.
          example: Кло-Люсе, Амбуаз, Турень, Королевство Франция.
        productAuthor_education:
          type: string
          description: Образование автора товара искусства.
          example: Инженер, астроном, философ, анатом, математик, скульптор.
        productAuthor_education_art:
          type: string
          description: Художественное образование автора товара искусства.
          example: Художник. Учеба в мастерской Андреа Верроккьо.
        productAuthor_teacher:
          type: string
          description: Опыт преподавания автора товара искусства.
          example: Свой многолетний опыт воспитания молодых живописцев прославленный мастер обобщил в ряде практических рекомендаций в мастерской Леонардо.
        productAuthor_style:
          type: string
          description: Персональный стиль автора товара искусства.
          example: Реализм
        productAuthor_social:
          type: string
          description: Социальные сети автора товара искусства
    ProductAuthorShow: #Базовая схема по сущности "Выставки автора".
      type: object
      properties:
        authorShow_id:
          type: integer
          format: int64
          example: 1
        authorShow_name:
          type: string
          example: Галерея Артемида, совместная выставка.
        authorShow_year:
          type: string
          example: 2021
        authorShow_place:
          type: string
          example: Париж
    ProductAuthorAchievement: #Базовая схема по сущности "Награды автора".
      type: object
      properties:
        authorAchievement_id:
          type: integer
          format: int64
          example: 1
        authorAchievement_name:
          type: string
          example: Лауреат Московской арт премии.
    ProductCategory: #Базовая схема по сущности "Категория".
      type: object
      required:
        - productCategory_id
      properties:
        productCategory_id:
          type: integer
          format: int64
          description: Жанры товара 1 - Живопись, 2 - Графика, 3 - Фотография, 4 - Digital.
          enum:
            - 1
            - 2
            - 3
            - 4
        productCategory_name:
          type: string
          example: Живопись
    ProductStyle: #Базовая схема по сущности "Стиль".
      type: object
      required:
        - productStyle_id
      properties:
        productStyle_id:
          type: integer
          format: int64
          description: Жанры товара 1 - Абстракция, 2 - Минимализм, 3 - Экспрессионизм, 4 - Концептуальное искусство, 5 - Фигуративное искусство, 6 - Pop Art, 7 - Street Art, 8 - Интерьерное.
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
        productStyle_name:
          type: string
          example: Абстракция
    ProductGenre: #Базовая схема по сущности "Жанр".
      type: object
      required:
        - productGenre_id
      properties:
        productGenre_id:
          type: integer
          format: int64
          description: Жанры товара 1 - Анималистика, 2 - Аллегорический, 3 - Батальный, 4 - Былинный, 5 - Бытовой, 6 - Ню, 7 - Религиозный.
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
        productGenre_name:
          type: string
          example: Анималистикаа
    ProductSearch: #Схема для поиска товаров искусств. Данная схема учитывает фильтрацию товаров искусств.
      type: object
      required:
        - product_id
        - product_name
        - product_jpeg
        - product_category
        - product_style
        - product_genre
        - product_size_category
        - product_country
        - product_year
        - product_cost_category
        - product_author
      properties:
        product_id:
          type: integer
          format: int64
          example: 1
        product_name:
          type: string
          example: Мона Лиза
        product_jpeg:
          type: string
          example: Reference/URL подгруженного изображения товара искусств.
        product_category:
          $ref: "#/components/schemas/ProductCategory"
        product_style:
          $ref: "#/components/schemas/ProductStyle"
        product_genre:
          $ref: "#/components/schemas/ProductGenre"
        product_size_category:
          type: integer
          description: Выбор размера товара искусства 1 - Любой, 2 - Small (до 40 см), 3 - Medium (40 - 100 см), 4 - Large (100 - 160 см), 5 - Oversize (более 160 см)
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        product_size:
          type: string
          example: 40.6 × 40.6 см
        product_country:
          type: string
          example: Испания
        product_city_sale:
          type: string
          description: Город продажи товара искусства.
          example: Москва
        product_year:
          type: string
          format: date
          description: Год создания товара
          example: 01.01.2001
        product_year_start:
          type: string
          format: date
          description: Год создания товара
          example: 2001
        product_year_end:
          type: string
          format: date
          description: Год создания товара
          example: 2003
        product_cost_category:
          type: integer
          description: Выбор категории цен товара искусства 1 - до 20 000 руб., 2 - от 20 000 до 50 000 руб., 3 - от 50 000 до 100 000 руб., 4 - от 100 000 до 200 000 руб., 5 - от 200 000 до 500 000 руб.
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        product_cost_end:
          type: integer
          example: 79200000
        product_author:
          $ref: "#/components/schemas/ProductAuthorShort"
        product_analytics:
          $ref: "#/components/schemas/ProductAnalyticsDiagram"
    ProductSearchArray: #Схема для отображения всех товаров искусств в каталоге.
      type: array
      items:
        $ref: "#/components/schemas/ProductSearch"
    ProductAuthorShort: #Схема для вывода краткой информации по автору товара искусства.
      type: object
      required:
        - productAuthor_id
      properties:
        productAuthor_id:
          type: integer
          format: int64
          example: 1
        productAuthor_name:
          type: string
          example: Леонардо да Винчи
    ProductAnalyticsDiagram: #Базовая схема по сущности "Цены товара".
      type: object
      required:
        - productanalyticscost_id
      properties:
        analyticsDiagram_id:
          type: integer
          format: int64
          example: 1
        analyticsDiagram_cost:
          type: integer
          description: Рассчитанная цена товара искусства алгоритмом заказчика в определенную дату.
          example: 29000
        analyticsDiagram_date:
          type: string
          description: Дата ценаы товара искусства алгоритмом заказчика.
          example: 20.02.2001
    ProductAnalytics: #Схема для отображения информации аналитики на карточке товара.
      type: object
      required:
        - productAnalytics_id
        - productAnalytics_cost
        - productAnalytic_collection
        - productAnalytic_cm
      properties:
        productAnalytics_id:
          type: integer
          format: int64
          example: 1
        productAnalytics_cost:
          type: string
          description: Рассчитанная цена товара искусства алгоритмом заказчика (может быть диапозоном).
          example: 29000 - 31000
        productAnalytic_collection:
          type: string
          description: В каких коллекциях находится товар.
          example: Коллекция Путина, Коллекция Пушника.
        productAnalytic_cm:
          type: string
          description: Упоминания в СМИ.
        productAnalytic_date:
          type: string
          format: date
          description: Дата заказанной аналитики.
          example: 20.01.2001
        analytics_diagram:
          $ref: "#/components/schemas/ProductAnalyticsDiagram"
    ProductAnalyticsOrder: #Схема для создания заказа аналитики товара искусства.
      type: object
      required:
        - productAuthor_name
        - productAuthor_sex
        - productAuthor_age
        - productAuthor_city_live
        - product_name
        - product_jpeg
        - product_category
        - product_style
        - product_genre
        - product_size
        - product_material1
        - product_material2
        - product_year
        - product_city_sale
      properties:
        productAuthor_name:
          type: string
          description: Имя/псевдоним автора товара искусств.
          example: Винсент Ван Гог
        productAuthor_sex:
          type: integer
          description: Выбор пола автора. 1 - Мужской, 2 - Женский.
          enum:
            - 1
            - 2
        productAuthor_age:
          type: string
          description: Возраст автора товара искусства.
          example: 18 лет
        productAuthor_city_live:
          type: string
          description: Город проживания автора товара искусства.
          example: Зюндерт
        product_name:
          type: string
          description: Наименование товара искусства.
          example: Подсолнухи
        product_jpeg:
          type: string
          example: Reference/URL подгруженного изображения товара искусств.
        product_category:
          $ref: "#/components/schemas/ProductCategory"
        product_style:
          $ref: "#/components/schemas/ProductStyle"
        product_genre:
          $ref: "#/components/schemas/ProductGenre"
        product_size:
          type: string
          example: 40.6 × 40.6 см
        product_material1:
          type: string
          example: Акриловые краски
        product_material2:
          type: string
          example: Холст
        product_year:
          type: string
          description: Год создания товара искусства.
          example: 2010
        product_city_sale:
          type: string
          description: Город продажи товара искусства.
          example: Москва
    ProductAnalyticsInfo: #Схема для отображения информации по товару искусства в карточке заказанной аналитики.
      type: object
      required:
        - product_name
        - product_category
        - product_style
        - product_genre
        - product_size
        - product_material1
        - product_material2
        - product_year
        - product_city_sale
      properties:
        product_name:
          type: string
          description: Наименование товара искусства.
          example: Подсолнухи
        product_category:
          $ref: "#/components/schemas/ProductCategory"
        product_style:
          $ref: "#/components/schemas/ProductStyle"
        product_genre:
          $ref: "#/components/schemas/ProductGenre"
        product_size:
          type: string
          example: 40.6 × 40.6 см
        product_material1:
          type: string
          example: Акриловые краски
        product_material2:
          type: string
          example: Холст
        product_year:
          type: string
          description: Год создания товара искусства.
          example: 2010
        product_city_sale:
          type: string
          description: Город продажи товара искусства.
          example: Москва
    ProductAnalyticsAuthor: # Схема краткой информации об авторе товара искусства для списка заказов аналитики.
      type: object
      required:
        - productAuthor_name
        - productAuthor_sex
        - productAuthor_age
        - productAuthor_city_live
      properties:
        productAuthor_name:
          type: string
          description: Имя/псевдоним автора товара искусств.
          example: Винсент Ван Гог
        productAuthor_sex:
          type: integer
          description: Выбор пола автора. 1 - Мужской, 2 - Женский.
          enum:
            - 1
            - 2
        productAuthor_age:
          type: string
          description: Возраст автора товара искусства.
          example: 18 лет
        productAuthor_city_live:
          type: string
          description: Город проживания автора товара искусства.
          example: Зюндерт
    ProductAnalyticsShort: # Схема краткой информации о полученной аналитике товара искусства.
      type: object
      required:
        - productAnalytics_id
        - productAnalytic_date
      properties:
        productAnalytics_id:
          type: integer
          format: int64
          example: 1
        productAnalytic_date:
          type: string
          format: date
          description: Дата заказанной аналитики.
          example: 2001
    ProductShort: #Схема краткой информации о товаре искусства для истории аналитики.
      type: object
      required:
        - product_id
        - product_name
      properties:
        product_id:
          type: integer
          format: int64
          example: 1
        product_name:
          type: string
          description: Наименование товара искусства.
          example: Подсолнухи
    ProductAnalyticsList: #Схема для отображения заказов аналитики товаров в личном кабинете.
      type: object
      required:
        - user_id
        - productAnalytic
        - productAuthor
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
        productAnalytics:
          $ref: "#/components/schemas/ProductShort"
        productAuthor:
          $ref: "#/components/schemas/ProductAuthorShort"
    ProductAnalyticsListArray: #Схема для списка заказов аналитики товаров искусств в личном кабинете.
      type: array
      items:
        $ref: "#/components/schemas/ProductAnalyticsList"
    ProductAnalyticsUser: #Схема результата аналитики товаров искусства в личном кабинете.
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
        product:
          $ref: "#/components/schemas/ProductAnalyticsInfo"
        product_author:
          $ref: "#/components/schemas/ProductAnalyticsAuthor"
        product_analytics:
          $ref: "#/components/schemas/ProductAnalytics"
